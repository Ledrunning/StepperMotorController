
StepMotorProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000194  00000228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000194  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800106  00800106  0000022e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000022e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000743  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000660  00000000  00000000  00000a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d1  00000000  00000000  0000106f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  00001340  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003aa  00000000  00000000  000013bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b9  00000000  00000000  00001766  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000181f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	83 c0       	rjmp	.+262    	; 0x10a <__vector_1>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	25 c0       	rjmp	.+74     	; 0x6c <__vector_16>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e4 e9       	ldi	r30, 0x94	; 148
  48:	f1 e0       	ldi	r31, 0x01	; 1
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a6 30       	cpi	r26, 0x06	; 6
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a6 e0       	ldi	r26, 0x06	; 6
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	ab 30       	cpi	r26, 0x0B	; 11
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	62 d0       	rcall	.+196    	; 0x12c <main>
  68:	93 c0       	rjmp	.+294    	; 0x190 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <__vector_16>:
volatile unsigned char step_index, count_2, status;
volatile unsigned int ovftimes;

// Прерывание по переполнению Т0
ISR(TIMER0_OVF_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	3f 93       	push	r19
  7a:	8f 93       	push	r24
  7c:	9f 93       	push	r25
  7e:	ef 93       	push	r30
  80:	ff 93       	push	r31
	static unsigned int count = 1;
	count++;
  82:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  86:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  8a:	01 96       	adiw	r24, 0x01	; 1
  8c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
  90:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>

	if(count >= ovftimes) // Применяем задержку
  94:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <ovftimes>
  98:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <ovftimes+0x1>
  9c:	82 17       	cp	r24, r18
  9e:	93 07       	cpc	r25, r19
  a0:	48 f1       	brcs	.+82     	; 0xf4 <__vector_16+0x88>
	{
		cli(); // Запрещаем прерывания
  a2:	f8 94       	cli

		count_2++; // Считаем кол-во шагов
  a4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
  a8:	8f 5f       	subi	r24, 0xFF	; 255
  aa:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>

		if(status) // если status == 1 крутим двигатель
  ae:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <status>
  b2:	88 23       	and	r24, r24
  b4:	61 f0       	breq	.+24     	; 0xce <__vector_16+0x62>
		PORTB = cw_dir[step_index++];
  b6:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <step_index>
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	8e 0f       	add	r24, r30
  be:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <step_index>
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	ee 5f       	subi	r30, 0xFE	; 254
  c6:	fe 4f       	sbci	r31, 0xFE	; 254
  c8:	80 81       	ld	r24, Z
  ca:	85 b9       	out	0x05, r24	; 5
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <__vector_16+0x64>
		else       // иначе останавливаем
		PORTB = 0x00;
  ce:	15 b8       	out	0x05, r1	; 5

		if(step_index >= 4)
  d0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <step_index>
  d4:	84 30       	cpi	r24, 0x04	; 4
  d6:	10 f0       	brcs	.+4      	; 0xdc <__vector_16+0x70>
		{
			step_index = 0;
  d8:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <step_index>
		}

		if(count_2 > 8/*(шагов)*/*4) // Если кол-во шагов превысит определенное значение останавливаем двигатель
  dc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
  e0:	81 32       	cpi	r24, 0x21	; 33
  e2:	10 f0       	brcs	.+4      	; 0xe8 <__vector_16+0x7c>
		{
			status = 0;
  e4:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <status>
		}

		count = 0; // Сброс счетчика
  e8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
  ec:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
		TCNT0 = 0; // Старт счетчика с нуля
  f0:	16 bc       	out	0x26, r1	; 38
		sei(); // Глобально разрешаем прерывания
  f2:	78 94       	sei
	}
}
  f4:	ff 91       	pop	r31
  f6:	ef 91       	pop	r30
  f8:	9f 91       	pop	r25
  fa:	8f 91       	pop	r24
  fc:	3f 91       	pop	r19
  fe:	2f 91       	pop	r18
 100:	0f 90       	pop	r0
 102:	0f be       	out	0x3f, r0	; 63
 104:	0f 90       	pop	r0
 106:	1f 90       	pop	r1
 108:	18 95       	reti

0000010a <__vector_1>:

// прерывание по вектору INT0
ISR(INT0_vect)
{
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	8f 93       	push	r24
	status = 1; // Запускаем двигатель
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <status>
	count_2 = 1;
 11c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
}
 120:	8f 91       	pop	r24
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

0000012c <main>:
int main(void)
{
	// Input/Output Ports initialization
	// Port B initialization
	// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=Out Bit1=Out Bit0=Out
	DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
 12c:	8f e0       	ldi	r24, 0x0F	; 15
 12e:	84 b9       	out	0x04, r24	; 4
	// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=0 Bit1=0 Bit0=0
	PORTB=(0<<PINB7) | (0<<PINB6) | (0<<PINB5) | (0<<PINB4) | (0<<PINB3) | (0<<PINB2) | (0<<PINB1) | (0<<PINB0);
 130:	15 b8       	out	0x05, r1	; 5

	ADCSRA = (1 << ADEN) // разрешение АЦП
 132:	86 e8       	ldi	r24, 0x86	; 134
 134:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
	| (1 << ADPS2) // предделитель на 64 (частота АЦП 125kHz)
	| (1 << ADPS1);
	ADMUX = 0x00; // ADC0 - вход, внешний ИОН 5 Вольт
 138:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
	// INT1: On
	// INT1 Mode: Falling Edge
	// Interrupt on any change on pins PCINT0-7: Off
	// Interrupt on any change on pins PCINT8-14: Off
	// Interrupt on any change on pins PCINT16-23: Off
	EICRA=(1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
 13c:	8a e0       	ldi	r24, 0x0A	; 10
 13e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__EEPROM_REGION_LENGTH__+0x7f0069>
	EIMSK=(1<<INT1) | (1<<INT0);
 142:	83 e0       	ldi	r24, 0x03	; 3
 144:	8d bb       	out	0x1d, r24	; 29
	EIFR=(1<<INTF1) | (1<<INTF0);
 146:	8c bb       	out	0x1c, r24	; 28
	PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
 148:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__EEPROM_REGION_LENGTH__+0x7f0068>


	TCCR0A |= (1 << CS01); // Предделитель на 8
 14c:	84 b5       	in	r24, 0x24	; 36
 14e:	82 60       	ori	r24, 0x02	; 2
 150:	84 bd       	out	0x24, r24	; 36
	TCNT0 = 0; // Старт счетчика с нуля
 152:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1 << TOIE0); // Разрешаем прерывания по переполнению Т0
 154:	ee e6       	ldi	r30, 0x6E	; 110
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	81 60       	ori	r24, 0x01	; 1
 15c:	80 83       	st	Z, r24

	ovftimes = 10; // первоначальная задержка
 15e:	8a e0       	ldi	r24, 0x0A	; 10
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <ovftimes+0x1>
 166:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <ovftimes>

	sei(); // Глобально разрешаем прерывания
 16a:	78 94       	sei

	while(1)
	{
		ADCSRA |= (1 << ADSC); // Начинаем преобразование
 16c:	ea e7       	ldi	r30, 0x7A	; 122
 16e:	f0 e0       	ldi	r31, 0x00	; 0
		while (ADCSRA & (1 << ADSC)); // Ждем пока завершится преобразование
		ovftimes = ADCW; // Значение временной задержки
 170:	a8 e7       	ldi	r26, 0x78	; 120
 172:	b0 e0       	ldi	r27, 0x00	; 0

	sei(); // Глобально разрешаем прерывания

	while(1)
	{
		ADCSRA |= (1 << ADSC); // Начинаем преобразование
 174:	80 81       	ld	r24, Z
 176:	80 64       	ori	r24, 0x40	; 64
 178:	80 83       	st	Z, r24
		while (ADCSRA & (1 << ADSC)); // Ждем пока завершится преобразование
 17a:	80 81       	ld	r24, Z
 17c:	86 fd       	sbrc	r24, 6
 17e:	fd cf       	rjmp	.-6      	; 0x17a <main+0x4e>
		ovftimes = ADCW; // Значение временной задержки
 180:	8d 91       	ld	r24, X+
 182:	9c 91       	ld	r25, X
 184:	11 97       	sbiw	r26, 0x01	; 1
 186:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <ovftimes+0x1>
 18a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <ovftimes>
	}
 18e:	f2 cf       	rjmp	.-28     	; 0x174 <main+0x48>

00000190 <_exit>:
 190:	f8 94       	cli

00000192 <__stop_program>:
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>
